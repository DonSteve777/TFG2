/////////////////////////////////////////
// cases generator and time chrono for 357 problem in aceptaelreto.com (el problema pintando fractales)
// https://www.aceptaelreto.com/problem/statement.php?id=167
// Linux version
//	O (log N)
// Alvaro Abad de Donesteve

// 3 observaciones

// entrada tipo:
// 3
// 49
// 22
////////////////////////////////////////////

#include "../../utils.h"

#define MIN_CASOS 1
#define MAX_INTx 2147483647
#define MAX_DATO 1000000000
#define OBSERVATIONS 3
#define REPETITIONS 10	//for decrease the process creation noise, each case is being repeated to stablish an average time measure


template <std::size_t N>
int execvp(const char* file, const char* const (&argv)[N])
{
  assert((N > 0) && (argv[N - 1] == nullptr));

  return execvp(file, const_cast<char* const*>(argv));
}


int main(int argc, char* argv[] )
{
	int observaciones, status;
	long long currentN;
	std::ofstream csvFile, casosFile;
	currentN = MIN_CASOS;

//data sizes , (percents of max N)
	double observations[OBSERVATIONS] = { 0.1, 0.65, 0.98};

	try{
		csvFile.open("tiempos.csv", std::ofstream::trunc);	//If the file is opened for output operations and it already existed, its previous content is deleted and replaced by the new one.
		for(int i = 0; i < OBSERVATIONS-1; i++ )
			csvFile << "N,seconds,";
		if (argc > 1 && std::string(argv[1]) == "-t")
			csvFile << "N,seconds,tipo\n";
		else
			csvFile << "N,seconds\n";
		
	
	// 1. generar caso de tamanio n, y escribirlo en casos.txt
	}
	catch(std::ofstream::failure e){
		cout << " Error opening file";
	}

	for (int i = 0; i < OBSERVATIONS; i++) {
		casosFile.open("casos.txt", std::ofstream::trunc);	//If the file is opened for output operations and it already existed, its previous content is deleted and replaced by the new one.
		currentN = (long long) (observations[i]*MAX_DATO);
		cout << "N = " << currentN << "\n";
		srand(time(0)); //seeds the rand() function
		casosFile << currentN << "\n";
		casosFile.close();
		for (int k = 0; k < REPETITIONS; k++) {
			pid_t pid = fork();		
			if (pid == -1) {
				exit(EXIT_FAILURE);	//ERROR
			} else if (pid == 0) {
				const char* const argx[] = {"167.exe", nullptr};
				if (execvp("./167.exe", argx ) == -1)
					exit(EXIT_FAILURE);
			} else {
				// wait until erasmus.exe ends and finding out how much time a erasmus takes
				std::cout << std::fixed << std::setprecision(9) << std::left;
				auto start = steady_clock::now();
				
				if ((pid = wait(&status)) == -1)
					exit(EXIT_FAILURE);
				else{
					auto end = steady_clock::now();
					std::chrono::duration<double> diff = end - start;
					cout << "i = " << i + 1 << " | N = " << currentN << " | seconds = " << std::setw(9) << diff.count() << '\n';
					cout << "--------------------------------------------\n";
					cout << "--------------------------------------------\n";
					csvFile << currentN << "," << diff.count();
					if (i < OBSERVATIONS-1)
						csvFile << ",";
				}
			}
		}	
			
	}
	if (argc > 1 && std::string(argv[1]) == "-t")
		csvFile << ","<< LOGN;
	csvFile.close();
	return 0;
}
/*
N = 100000000
-2010088448
i = 1 | N = 100000000 | seconds = 0.010936400
-------------------------------------------- 
-------------------------------------------- 
-2010088448
i = 1 | N = 100000000 | seconds = 0.010689800
-------------------------------------------- 
-------------------------------------------- 
-2010088448
i = 1 | N = 100000000 | seconds = 0.013933100
--------------------------------------------
--------------------------------------------
-2010088448
i = 1 | N = 100000000 | seconds = 0.014623000
--------------------------------------------
--------------------------------------------
-2010088448
i = 1 | N = 100000000 | seconds = 0.017361300
--------------------------------------------
--------------------------------------------
-2010088448
i = 1 | N = 100000000 | seconds = 0.016272800
--------------------------------------------
--------------------------------------------
-2010088448
i = 1 | N = 100000000 | seconds = 0.015255000
--------------------------------------------
--------------------------------------------
-2010088448
i = 1 | N = 100000000 | seconds = 0.013453500
--------------------------------------------
--------------------------------------------
-2010088448
i = 1 | N = 100000000 | seconds = 0.010779600
--------------------------------------------
--------------------------------------------
-2010088448
i = 1 | N = 100000000 | seconds = 0.017081400
--------------------------------------------
--------------------------------------------
N = 650000000
-1918294528
i = 2 | N = 650000000 | seconds = 0.022079100
--------------------------------------------
--------------------------------------------
-1918294528
i = 2 | N = 650000000 | seconds = 0.014847400
--------------------------------------------
--------------------------------------------
-1918294528
i = 2 | N = 650000000 | seconds = 0.014631100
--------------------------------------------
--------------------------------------------
-1918294528
i = 2 | N = 650000000 | seconds = 0.017695800
--------------------------------------------
--------------------------------------------
-1918294528
i = 2 | N = 650000000 | seconds = 0.016201800
--------------------------------------------
--------------------------------------------
-1918294528
i = 2 | N = 650000000 | seconds = 0.014793400
--------------------------------------------
--------------------------------------------
-1918294528
i = 2 | N = 650000000 | seconds = 0.012121800
--------------------------------------------
--------------------------------------------
-1918294528
i = 2 | N = 650000000 | seconds = 0.015358000
--------------------------------------------
--------------------------------------------
-1918294528
i = 2 | N = 650000000 | seconds = 0.012950400
--------------------------------------------
--------------------------------------------
-1918294528
i = 2 | N = 650000000 | seconds = 0.010003000
--------------------------------------------
--------------------------------------------
N = 980000000
551652352
i = 3 | N = 980000000 | seconds = 0.015287400
--------------------------------------------
--------------------------------------------
551652352
i = 3 | N = 980000000 | seconds = 0.014589900
--------------------------------------------
--------------------------------------------
--------------------------------------------
551652352
i = 3 | N = 980000000 | seconds = 0.010605600
--------------------------------------------
--------------------------------------------
551652352
--------------------------------------------
551652352
i = 3 | N = 980000000 | seconds = 0.010605600
--------------------------------------------
--------------------------------------------
551652352
--------------------------------------------
--------------------------------------------
551652352
i = 3 | N = 980000000 | seconds = 0.015079600
--------------------------------------------
--------------------------------------------
551652352
i = 3 | N = 980000000 | seconds = 0.015902900
--------------------------------------------
--------------------------------------------
551652352
i = 3 | N = 980000000 | seconds = 0.016489400
--------------------------------------------
--------------------------------------------
551652352
i = 3 | N = 980000000 | seconds = 0.017518400
--------------------------------------------
--------------------------------------------
551652352
i = 3 | N = 980000000 | seconds = 0.014060500
--------------------------------------------
--------------------------------------------
551652352
i = 3 | N = 980000000 | seconds = 0.014015300
--------------------------------------------
--------------------------------------------
*/